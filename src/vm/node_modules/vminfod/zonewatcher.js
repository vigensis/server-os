/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2018, Joyent, Inc.
 *
 */

var EventEmitter = require('events').EventEmitter;
var util = require('util');

var assert = require('/usr/node/node_modules/assert-plus');
var SyseventStream = require('/usr/vm/node_modules/sysevent-stream');

module.exports = ZoneWatcher;
module.exports.ZoneWatcher = ZoneWatcher;
function ZoneWatcher(options) {
    var self = this;

    assert.object(options, 'options');
    assert.object(options.log, 'options.log');
    assert.optionalNumber(options.highWaterMark, 'options.highWaterMark');

    self.options = options;
    self.log = options.log;

    // create a Sysevent stream
    var opts = {
        logger: self.log,
        channel: 'com.sun:zones:status'
    };
    if (options.hasOwnProperty('highWaterMark')) {
        opts.highWaterMark = options.highWaterMark;
    }

    self.se = new SyseventStream(opts);

    self.se.once('ready', function syseventStreamReady() {
        self.emit('ready');
    });

    self.se.on('readable', function syseventStreamReadable() {
        var ev;
        while ((ev = self.se.read()) !== null) {
            var o = {
                type: 'event',
                zonename: ev.data.zonename,
                time: ev.time,
                ev: ev
            };

            if (ev.class === 'status') {
                o.newstate = ev.data.newstate;
            } else if (ev.class === 'init' && ev.subclass === 'restart') {
                o.restarts = ev.data.restarts;
            } else {
                continue;
            }

            self.emit('event', o);
        }
    });
}
util.inherits(ZoneWatcher, EventEmitter);

ZoneWatcher.prototype.stop = function stop() {
    var self = this;

    self.se.stop();
};
