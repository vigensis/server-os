/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2014, Joyent, Inc. All rights reserved.
 *
 *
 * dladm wrapper
 *
 * Exported functions (experimental - expect these interfaces to be unstable):
 *
 * setLinkProp(zone, nic, property, value, log, callback)
 * resetLinkProp(zone, nic, property, log, callback)
 * showLinkProp(zone, nic, log, callback)
 * showEtherstub(stub, log, callback)
 * createEtherStub(stub, log, callback)
 * deleteEtherStub(stub, log, callback)
 */

// Ensure we're using the platform's node
require('/usr/node/node_modules/platform_node_version').assert();

var execFile = require('child_process').execFile;

var ARRAY_PROPS = {
    'allowed-ips': 1,
    'allowed-dhcp-cids': 1,
    'dynamic-methods': 1,
    'protection' : 1
};

function dladm(args, log, callback) {
    var cmd = '/usr/sbin/dladm';

    log.debug(cmd + ' ' + args.join(' '));

    execFile(cmd, args, function (error, stdout, stderr) {
        if (error) {
            log.error('"' + cmd + ' ' + args.join(' ')
                + '" failed: ' + stderr);
            callback(error, {'stdout': stdout, 'stderr': stderr});
        } else {
            callback(null, {'stdout': stdout, 'stderr': stderr});
        }
    });
}

exports.setLinkProp = function (zone, nic, property, value, log, callback) {
    var isArray = false;
    if (ARRAY_PROPS.hasOwnProperty(property)) {
        if (!Array.isArray(value)) {
            callback(new Error('dladm: property "' + property
                + '" requires an array as a value'));
            return;
        }
        isArray = true;
    }
    var args = ['set-linkprop', '-t', '-z', zone, '-p',
        property + '=' + (isArray ? value.join(',') : value), nic];
    dladm(args, log, callback);
};

exports.resetLinkProp = function (zone, nic, property, log, callback) {
    var args = ['reset-linkprop', '-t', '-z', zone, '-p', property, nic];
    dladm(args, log, callback);
};

exports.showLinkProp = function (zone, nic, log, callback) {
    var args = ['show-linkprop', '-z', zone, '-o', 'property,value', nic];
    var lastProp;
    var line;
    var lines;
    var properties = {};
    var val;

    dladm(args, log, function (err, res) {
        if (err) {
            callback(err);
            return;
        }
        lines = res.stdout.split('\n');
        for (line in lines) {
            var fields = lines[line].replace(/^\s+/, '').split(/\s+/g);

            if (fields[0] == 'PROPERTY' || fields[0] === '') {
                continue;
            }

            if (fields.length == 1) {
                if (!(properties[lastProp] instanceof Array)) {
                    properties[lastProp] = [ properties[lastProp] ];
                }

                // Comments below are to avoid "comma or semicolon followed
                // by non-blank" errors (for the comma inside the replace)

                properties[lastProp].push(fields[0].replace(/,$/, ''));

            } else {
                val = fields[1].replace(/,$/, '');
                if (ARRAY_PROPS.hasOwnProperty(fields[0])) {
                    properties[fields[0]] = val.split(',');
                } else {
                    properties[fields[0]] = val;
                }
                lastProp = fields[0];
            }
        }
        callback(null, properties);
    });
};

exports.listLinks = function (zone, log, callback) {
    var args = [ 'show-vnic', '-z', zone, '-o', 'link', '-p' ];

    dladm(args, log, function (err, res) {
        if (err) {
            callback(err);
            return;
        }

        callback(null, res.stdout.split('\n'));
    });
};

exports.showEtherstub = function (stub, log, callback) {
    var args = ['show-etherstub'];
    var stubs = [];
    var line;
    var lines;

    if (stub) {
        args.push(stub);
    }

    dladm(args, log, function (err, res) {
        if (err) {
            callback(err);
            return;
        }

        lines = res.stdout.split('\n');
        for (line in lines) {
            var fields = lines[line].replace(/^\s+/, '').split(/\s+/g);

            if (fields[0] == 'LINK' || fields[0] === '') {
                continue;
            }

            stubs.push(fields[0]);
        }

        callback(null, stubs);
    });

};

exports.createEtherstub = function (stub, log, callback) {
    var args = ['create-etherstub', stub];

    dladm(args, log, function (err, res) {
        if (err) {
            callback(err);
            return;
        }
        callback(null);
    });
};

exports.deleteEtherstub = function (stub, log, callback) {
    var args = ['delete-etherstub', stub];

    dladm(args, log, function (err, res) {
        if (err) {
            callback(err);
            return;
        }
        callback(null);
    });
};
