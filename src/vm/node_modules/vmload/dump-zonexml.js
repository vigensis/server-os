#!/usr/node/bin/node
/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2018, Joyent, Inc.
 *
 * SUMMARY:
 *
 *  This is a test/dummy driver for the getVmobjZMLFile() function. If at least
 *  one argument is passed on the cmdline, the argument(s) are assued to be VM
 *  UUIDs and only the VM(s) with that/those UUID(s) will be retrieved. If no
 *  arguments are passed, the XML for all VMs found on the system will be
 *  retrieved. The output will be an object with a key (VM uuid) having value
 *  (the JSONized XML properties) for each VM.
 */

var bunyan = require('/usr/node/node_modules/bunyan');
var execFile = require('child_process').execFile;
var getVmobjXML = require('./vmload-xml').getVmobjXML;
var getVmobjXMLFile = require('./vmload-xml').getVmobjXMLFile;
var path = require('path');
var vasync = require('/usr/vm/node_modules/vasync');

var log = bunyan.createLogger({
    level: 'debug',
    name: 'dump-zoneadm',
    streams: [
        {
            stream: process.stderr,
            level: 'debug'
        }
    ],
    serializers: bunyan.stdSerializers
});
var results = {};


if (!process.argv[2]) {
    // no arguments, so get list of VMs from zoneadm
    execFile('/usr/sbin/zoneadm', ['list', '-c'],
        function (error, stdout, stderr) {
            if (error) {
                throw (error);
            }
            dumpXMLs(stdout.split(/\n/));
        }
    );
} else {
    dumpXMLs(process.argv.slice(2));
}

function dumpXMLs(vms)
{
    vasync.forEachParallel({
        inputs: vms,
        func: addXML
    }, function (err) {
        if (err) {
            throw (err);
        }

        console.log(JSON.stringify(results, null, 2));
    });
}

function addXML(vm, callback)
{
    var filename = path.join('/etc/zones', vm + '.xml');

    if (vm.length !== 36) {
        log.error('VM zonename ' + vm + ' is not a uuid, skipping.');
        callback();
        return;
    }

    getVmobjXMLFile(filename, {log: log}, function (err, obj) {
        if (err) {
            throw err;
        }
        results[vm] = obj;
        callback();
    });
}
