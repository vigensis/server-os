/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2018, Joyent, Inc.
 *
 */

var EventEmitter = require('events').EventEmitter;
var util = require('util');

var assert = require('/usr/node/node_modules/assert-plus');
var SyseventStream = require('/usr/vm/node_modules/sysevent-stream');

module.exports = ZpoolWatcher;
module.exports.ZpoolWatcher = ZpoolWatcher;
function ZpoolWatcher(options) {
    var self = this;

    self.options = options;
    assert.object(options.log, 'no logger passed to ZpoolWatcher()');
    self.log = options.log;

    // create a Sysevent stream
    var opts = {
        logger: self.log,
        class: 'EC_zfs',
        subclasses: ['ESC_ZFS_history_event']
    };

    self.se = new SyseventStream(opts);

    self.se.once('ready', function syseventStreamReady() {
        self.emit('ready');
    });

    self.se.on('readable', function syseventStreamReadable() {
        var ev;
        while ((ev = self.se.read()) !== null)
            self._handle_event(ev);
    });
}
util.inherits(ZpoolWatcher, EventEmitter);

/*
 * called internally whenever a new sysevent is received -
 * this method is responsible for constructing an object to emit
 * based on the sysevent received.
 */
ZpoolWatcher.prototype._handle_event = function _handle_event(ev) {
    var self = this;
    var item;
    var i;
    var key;
    var value;

    // object to be emitted
    var o = {};

    assert.object(ev, 'ev');
    assert.object(ev.data, 'ev.data');

    // extract dataset
    item = ev.data.history_dsname;
    if (item === undefined) {
        /*
         * Dataset name is not set so ignore this event.  This can happen in the
         * case where events are emmitted for zpool-wide events, such as `zpool
         * scrub`.
         */
        self.log.debug({ev: ev}, 'ignoring ZpoolWatcher event without dsname');
        return;
    }
    assert.string(item, 'invalid "dsname" in ZFS record');
    o.dsname = item;

    // extract pool name
    item = ev.data.pool_name;
    assert.string(item, 'invalid pool name in ZFS record');
    o.pool = item;

    // extract and parse timestamp
    item = ev.data.history_time;
    assert.number(item, 'invalid "history time" in ZFS record');
    o.timestamp = new Date(item * 1000);

    // extract action, eg: "create", "destroy", "set", etc.
    item = ev.data.history_internal_name;
    assert.string(item, 'invalid "internal_name" in ZFS record');
    o.action = item;

    // extract any optional extras
    // this will typically be set by "zfs set" and will be a string like
    // "sync=1", "atime=0", etc.
    o.extra = {};
    o.extras = ev.data.history_internal_str;
    if (o.extras) {
        i = o.extras.indexOf('=');
        if (i >= 0) {
            key = o.extras.substr(0, i);
            value = o.extras.substr(i + 1);
            o.extra[key] = value;
        }
    }

    self.log.trace({o: o}, 'emitting ZpoolWatcher event');
    self.emit(o.action, o);
    self.emit('event', o);
};

ZpoolWatcher.prototype.stop = function stop() {
    var self = this;

    self.se.stop();
};
