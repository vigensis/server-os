/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2015, Joyent, Inc. All rights reserved.
 */

var async = require('/usr/node/node_modules/async');
var ipaddr = require('/usr/vm/node_modules/ip');

/**
 * There are some older fields like "ip" and "netmask" that are no longer
 * used in favor of newer means of specifying IP addresses and routing
 * prefixes. We upgrade anyone using them here to the new fields.
 */
function upgradeNic(nic, callback) {
    var maskbits;

    if (nic.hasOwnProperty('netmask')
        && !ipaddr.isIPv4Netmask(nic.netmask)) {
        callback(new Error('Specified netmask value is invalid: '
            + nic.netmask));
        return;
    }

    if (nic.hasOwnProperty('ip')) {
        if (!nic.hasOwnProperty('ips')) {
            if (ipaddr.isAutoConfigOption(nic.ip)) {
                nic.ips = [ nic.ip ];
            } else if (nic.hasOwnProperty('netmask')) {
                maskbits = ipaddr.netmaskToBits(nic.netmask);
                nic.ips = [ nic.ip + '/' + maskbits ];
                delete nic.netmask;
            } else {
                callback(new Error('Missing .netmask option for NIC: '
                    + JSON.stringify(nic)));
                return;
            }
        }
        delete nic.ip;
    }

    // The same is true for nics.*.gateway. Upgrade here, too.
    if (nic.hasOwnProperty('gateway')) {
        if (!nic.hasOwnProperty('gateways')) {
            nic.gateways = [ nic.gateway ];
        }
        delete nic.gateway;
    }

    callback(undefined, nic);
}

/**
 * When someone attempts to update an 'ip' or 'netmask' field, they're using
 * older properties. We'll need to extract information appropriately.
 */
function updateNic(vmobj, nic, callback) {
    var toUpdate;

    if (!nic.hasOwnProperty('mac')) {
        callback(new Error('NIC object needs a .mac property to update'));
        return;
    }

    vmobj.nics.some(function (n) {
        if (n.mac === nic.mac) {
            toUpdate = n;
            return true;
        }
        return false;
    });

    if (!toUpdate) {
        callback(new Error('There is no existing NIC with that mac address'));
        return;
    }

    function getIP(cb) {
        var netmask;
        var parts;
        if (toUpdate.hasOwnProperty('ips')) {
            if (toUpdate.ips.length === 1
                && ipaddr.isCIDRv4(toUpdate.ips[0])) {

                parts = ipaddr.splitCIDR(toUpdate.ips[0]);
                if (parts.hasOwnProperty('prefix')) {
                    netmask = ipaddr.bitsToNetmask(parts.prefix);
                    return cb(parts.ip, netmask);
                } else {
                    return cb(parts.ip);
                }
            }
        } else if (toUpdate.hasOwnProperty('ip')) {
            return cb(toUpdate.ip, toUpdate.netmask);
        }
        return callback(new Error('Need a single existing IPv4 address to '
            + 'update .ip or .netmask'));
    }

    if (!nic.hasOwnProperty('ips')) {
        if (nic.hasOwnProperty('netmask')) {
            if (!nic.hasOwnProperty('ip')) {
                getIP(function (ip) {
                    nic.ip = ip;
                    upgradeNic(nic, callback);
                });
                return;
            }
        } else {
            if (nic.hasOwnProperty('ip')) {
                if (ipaddr.isAutoConfigOption(nic.ip)) {
                    upgradeNic(nic, callback);
                    return;
                } else {
                    getIP(function (ip, netmask) {
                        if (netmask !== undefined) {
                            nic.netmask = netmask;

                            upgradeNic(nic, callback);
                            return;
                        } else {
                            callback(new Error('Updating IP address of NIC, '
                                + 'but there is currently no '
                                + 'specified netmask'));
                            return;
                        }
                    });
                    return;
                }
            }
        }
    }

    upgradeNic(nic, callback);
}

function upgradeNicProp(property, payload, cb) {
    if (payload.hasOwnProperty(property)) {
        async.map(payload[property], upgradeNic, function (err) {
            if (err) {
                cb(err);
                return;
            }

            payload[property].map(function (nic) {
                if (!nic.hasOwnProperty('ips')) {
                    nic.ips = [];
                }
            });
            cb();
        });
    } else {
        cb();
    }
}

function upgradeNics(payload, cb) {
    upgradeNicProp('nics', payload, cb);
}

function upgradeNicAdds(payload, cb) {
    upgradeNicProp('add_nics', payload, cb);
}

function upgradeNicUpdates(vmobj, payload, cb) {
    if (payload.hasOwnProperty('update_nics')) {
        async.map(payload.update_nics,
            updateNic.bind(null, vmobj), cb);
    } else {
        cb();
    }
}

module.exports = {
    'upgradeNics': upgradeNics,
    'upgradeNicAdds': upgradeNicAdds,
    'upgradeNicUpdates': upgradeNicUpdates
};
