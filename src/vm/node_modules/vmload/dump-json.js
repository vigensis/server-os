#!/usr/node/bin/node
/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2018, Joyent, Inc.
 *
 * SUMMARY:
 *
 *  This is a test/dummy driver for the getVmobjJSON() function. If arguments
 *  are passed on the cmdline, they are assumed to be UUIDs and only VMs
 *  matching those UUIDs will be included in the output. If no arguments are
 *  passed, all VMs found will be included. Output will be an object with a
 *  key for each VM (the uuid) and a value including the JSON files found for
 *  that VM.
 */

var assert = require('/usr/node/node_modules/assert-plus');
var bunyan = require('/usr/node/node_modules/bunyan');
var execFile = require('child_process').execFile;
var getVmobjJSON = require('./vmload-json').getVmobjJSON;
var vasync = require('/usr/vm/node_modules/vasync');

var log = bunyan.createLogger({
    level: 'debug',
    name: 'dump-zoneadm',
    streams: [
        {
            stream: process.stderr,
            level: 'debug'
        }
    ],
    serializers: bunyan.stdSerializers
});

execFile('/usr/sbin/zoneadm', ['list', '-c', '-p'],
    function (error, stdout, stderr) {

    var argv = [];
    var lines = stdout.split(/\n/);
    var results = {};

    if (process.argv.length >= 3) {
        argv = process.argv.slice(2);
    }

    vasync.forEachParallel({
        inputs: lines,
        func: function (line, cb) {
            var fields = line.split(':');
            var uuid;
            var zonepath;

            if (fields.length < 4) {
                cb();
                return;
            }

            zonepath = fields[3];
            uuid = fields[4];

            if (uuid === '') {
                cb();
                return;
            }

            // if there are no arguments or the arguments include this VM...
            if (argv.length === 0 || argv.indexOf(uuid) !== -1) {
                getVmobjJSON(zonepath, {log: log}, function (err, obj) {
                    assert.ifError(err);
                    results[uuid] = obj;
                    cb();
                    return;
                });
            } else {
                cb();
                return;
            }
        }
    }, function (err) {
        if (err) {
            throw err;
        }

        console.log(JSON.stringify(results, null, 2));
    });
});
